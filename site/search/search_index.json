{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Conreq Documentation Conreq is an extensible Con tent Req uesting platform. Read through the docs to learn how to set up Conreq features, or learn how to contribute to the Conreq repository! Want to join the community or have a question? Chat with us on Discord or create a post on GitHub Discussions !","title":"Home"},{"location":"#welcome-to-the-conreq-documentation","text":"Conreq is an extensible Con tent Req uesting platform. Read through the docs to learn how to set up Conreq features, or learn how to contribute to the Conreq repository! Want to join the community or have a question? Chat with us on Discord or create a post on GitHub Discussions !","title":"Welcome to the Conreq Documentation"},{"location":"building/","text":"There are two environments to build Conreq for: Development and Production. If you intend to edit Conreq's code, then proceed with the Development instructions. Creating a Development Environment Software Install Python 3.8 (Easiest if this is the only version of python on your computer) Install Visual Studio Code (Optional: Any editor would work) If using Windows: Install Visual Studio C++ (Within this installer, navigate to C++ Build Tools . Select MSVC and Windows 10 SDK ) Setting Up the Environment Pull the repository from GitHub. Open a terminal (ex. Command Prompt or PowerShell) as administrator at the root of the repository. If using Windows: type set-executionpolicy remotesigned and select Yes to All to allow external Python scripts to run on your computer. Type python -m venv venv to create a Python virtual environment. Type ./venv/Scripts/activate to enter the virtual environment. Type pip install -r requirements.txt to install all Python dependencies within the virtual environment. Create or update the database by typing python manage.py migrate . Type python manage.py run_huey to run the background task management system. Open a new terminal and type ./venv/Scripts/activate . Type python manage.py runserver to run the development webserver. Creating a Production Environment Follow all instructions laid out within Creating a Development Environment , but do not execute python manage.py runserver . Instead, do the following: Set your environment variable of DEBUG to false . The method of doing this will vary based on operating system. Type python manage.py collectstatic to move static files (CSS/JS/images) to their production directory. Type python manage.py compress to merge and compress static files. Type daphne conreq.asgi:application to run the production webserver on localhost:8000 . Here's some common execution parameters: daphne conreq.asgi:application --access-log logs\\access.log - Adds an access log file. daphne -b 0.0.0.0 conreq.asgi:application - Binds the webserver to the 0.0.0.0 instead of localhost. daphne -p 8001 conreq.asgi:application - Binds the webserver to port 8001 instead of 8000 . daphne -e ssl:8000:privateKey=key.pem:certKey=cert.pem conreq.asgi:application - Binds the webserver to the 0.0.0.0 on port 8000 with SSL enabled. Note: Do not use -p or -b in this mode. Using -e always binds to 0.0.0.0 . Visual Studio Code Configuration (optional) Visual Studio Code Extensions GitHub GitLens Python MagicPython Visual Studio Code Settings If your terminal does not show venv (ex. (venv) ... ), type ./venv/Scripts/activate . Type pip install -r requirements_dev.txt to install VS Code editor packages within the virtual environment. Enable Python Formatting Settings -> Editor: Format On Save -> ON Settings -> Python Formatting Provider -> Black Enabling Python Linting Ctrl+Shift+P -> Python: Select Linter -> pylint Settings -> Linting: Pylint Args -> Add Item -> --disable=line-too-long,bare-except,bad-continuation","title":"Building Conreq"},{"location":"building/#creating-a-development-environment","text":"","title":"Creating a Development Environment"},{"location":"building/#software","text":"Install Python 3.8 (Easiest if this is the only version of python on your computer) Install Visual Studio Code (Optional: Any editor would work) If using Windows: Install Visual Studio C++ (Within this installer, navigate to C++ Build Tools . Select MSVC and Windows 10 SDK )","title":"Software"},{"location":"building/#setting-up-the-environment","text":"Pull the repository from GitHub. Open a terminal (ex. Command Prompt or PowerShell) as administrator at the root of the repository. If using Windows: type set-executionpolicy remotesigned and select Yes to All to allow external Python scripts to run on your computer. Type python -m venv venv to create a Python virtual environment. Type ./venv/Scripts/activate to enter the virtual environment. Type pip install -r requirements.txt to install all Python dependencies within the virtual environment. Create or update the database by typing python manage.py migrate . Type python manage.py run_huey to run the background task management system. Open a new terminal and type ./venv/Scripts/activate . Type python manage.py runserver to run the development webserver.","title":"Setting Up the Environment"},{"location":"building/#creating-a-production-environment","text":"Follow all instructions laid out within Creating a Development Environment , but do not execute python manage.py runserver . Instead, do the following: Set your environment variable of DEBUG to false . The method of doing this will vary based on operating system. Type python manage.py collectstatic to move static files (CSS/JS/images) to their production directory. Type python manage.py compress to merge and compress static files. Type daphne conreq.asgi:application to run the production webserver on localhost:8000 . Here's some common execution parameters: daphne conreq.asgi:application --access-log logs\\access.log - Adds an access log file. daphne -b 0.0.0.0 conreq.asgi:application - Binds the webserver to the 0.0.0.0 instead of localhost. daphne -p 8001 conreq.asgi:application - Binds the webserver to port 8001 instead of 8000 . daphne -e ssl:8000:privateKey=key.pem:certKey=cert.pem conreq.asgi:application - Binds the webserver to the 0.0.0.0 on port 8000 with SSL enabled. Note: Do not use -p or -b in this mode. Using -e always binds to 0.0.0.0 .","title":"Creating a Production Environment"},{"location":"building/#visual-studio-code-configuration-optional","text":"","title":"Visual Studio Code Configuration (optional)"},{"location":"building/#visual-studio-code-extensions","text":"GitHub GitLens Python MagicPython","title":"Visual Studio Code Extensions"},{"location":"building/#visual-studio-code-settings","text":"If your terminal does not show venv (ex. (venv) ... ), type ./venv/Scripts/activate . Type pip install -r requirements_dev.txt to install VS Code editor packages within the virtual environment. Enable Python Formatting Settings -> Editor: Format On Save -> ON Settings -> Python Formatting Provider -> Black Enabling Python Linting Ctrl+Shift+P -> Python: Select Linter -> pylint Settings -> Linting: Pylint Args -> Add Item -> --disable=line-too-long,bare-except,bad-continuation","title":"Visual Studio Code Settings"},{"location":"code_tldr/","text":"This guide is intended to help developers gain an understanding of how the code in Conreq works together to make a functional application. Repository Structure manage.py - Django development tool (runs the development web server, initialize the databases, and more. resources/ - Branding, legal documents, and other miscellaneous files conreq/ - Main Django application conreq/settings.py - Boot-time configuration and settings conreq/urls.py - HTTP URL path handler (relies on the urls.py and views.py within conreq/apps/* to render HTML) conreq/asgi.py - Websocket path handler conreq/core/server_websockets.py - Back-end websocket commands (sends/receives json) conreq/static-dev/client_websockets.js - Front-end websocket commands (sends/receives json) conreq/apps/ - Django sub-applications (typically a unique tab within Conreq) conreq/core/ - Core back-end functionality (request logic, content discovery logic, etc.) conreq/static-dev/ - CSS, JavaScript, and Image files conreq/templates/ - HTML templates used by sub-application's views.py to generate web pages conreq/utils/ - Generic functions that can be used by their respective category Fundamental Django Design Almost all of the Conreq back-end \"logic\" will trace back to a views.py file. Within this file we import all sorts helper functions to help us render a specific URL address. Most of these helper functions are located within conreq/utils/ and conreq/core/ . Here's a high level example of what occurs when the browser visits a URL. The browser visits a Conreq web address Django determines how to handle this URL by comparing the path (let's use the example of /discover/ ) with what is contained in conreq/urls.py Based on conreq/urls.py , Django determines there is another file that defines /discover/ , and that file is conreq/apps/discover/urls.py . Based on conreq/apps/discover/urls.py , Django determines this URL is rendered by conreq/apps/discover/views.py Django renders the HTML (known as a Django View ) by running the the respective view function contained within conreq/apps/discover/views.py The Django webserver automatically determines how to forward this rendered content to the browser based on what was returned by the view (ex. a HttpResponse or JsonResponse ) Conreq Viewport Rendering Currently, the viewport (current tab you're on) is dynamically rendered through detecting when the URL hash (ex #/settings/server/ ) changes. Detection of these changes occurs in conreq/static-dev/js/viewport.js When a change is detected, the browser will fetch whatever HTML would have been at /settings/server/ and will inject that into the viewport. Additionally, setting up any click events, and showing page transitions entirely occurs within the previously mentioned viewport.js . Note: All injected HTML is passed through DOMPurify , so therefore cannot contain potentially insecure elements such as iframes or JavaScript. Conreq Modal Rendering Modals (pop up boxes) that appear on the page are rendered in a similar way to the viewport, but renders occur on click events rather than URL-change events. These events exist within conreq/static-dev/js/modal.js and are configured when ever the viewport has been refreshed. All modals are injected into the single #modal-container that exists on the page from first-load. Buttons that can create a modal will contain a data-modal-url value, which contains the URL endpoint to the modal. The client browser will fetch the rendered HTML in order to inject it into the page. Additionally, setting up any click events for the new modal occurs within the previously mentioned modal.js . Note: All injected HTML is passed through DOMPurify , so therefore cannot contain potentially insecure elements such as iframes or JavaScript. Django Websockets Websockets exist alongside the normal HTTP requests (ex. viewport rendering). They can be thought of as a way of the server and client communication via chat messages . When the page first loads, a connection to a chat room is formed, and chat bubbles are communicated back and forth between the server and client browser. On the server side, the URL location of where private chat rooms (direct messages) are created is determined within conreq/asgi.py . In this file, the URL is directly linked to a consumer . Django does support creating chat groups with multiple clients in it, however, Conreq currently does not utilize this feature. At the most fundamental level, a consumer is a Python class with a send and receive function. All of Conreq's consumers can be found in conreq/core/server_websockets.py . In Django, the receive and response format is most commonly JSON. This is determined based on your consumer's base class (ex. JsonWebsocketConsumer ). These classes have built-in functions for sending and receiving JSON messages (ex. send_json and recieve_json ). Overriding these functions will be where most of your Websocket logic will be written. When a JSON message is sent from server to the client browser, it will be received by the JavaScript file conreq/static-dev/client_websockets.js using ES6 standard JavaScript Websockets. This file is also the one that initiates a new Websocket communication session when the page first loads.","title":"Our Code Explained"},{"location":"code_tldr/#repository-structure","text":"manage.py - Django development tool (runs the development web server, initialize the databases, and more. resources/ - Branding, legal documents, and other miscellaneous files conreq/ - Main Django application conreq/settings.py - Boot-time configuration and settings conreq/urls.py - HTTP URL path handler (relies on the urls.py and views.py within conreq/apps/* to render HTML) conreq/asgi.py - Websocket path handler conreq/core/server_websockets.py - Back-end websocket commands (sends/receives json) conreq/static-dev/client_websockets.js - Front-end websocket commands (sends/receives json) conreq/apps/ - Django sub-applications (typically a unique tab within Conreq) conreq/core/ - Core back-end functionality (request logic, content discovery logic, etc.) conreq/static-dev/ - CSS, JavaScript, and Image files conreq/templates/ - HTML templates used by sub-application's views.py to generate web pages conreq/utils/ - Generic functions that can be used by their respective category","title":"Repository Structure"},{"location":"code_tldr/#fundamental-django-design","text":"Almost all of the Conreq back-end \"logic\" will trace back to a views.py file. Within this file we import all sorts helper functions to help us render a specific URL address. Most of these helper functions are located within conreq/utils/ and conreq/core/ . Here's a high level example of what occurs when the browser visits a URL. The browser visits a Conreq web address Django determines how to handle this URL by comparing the path (let's use the example of /discover/ ) with what is contained in conreq/urls.py Based on conreq/urls.py , Django determines there is another file that defines /discover/ , and that file is conreq/apps/discover/urls.py . Based on conreq/apps/discover/urls.py , Django determines this URL is rendered by conreq/apps/discover/views.py Django renders the HTML (known as a Django View ) by running the the respective view function contained within conreq/apps/discover/views.py The Django webserver automatically determines how to forward this rendered content to the browser based on what was returned by the view (ex. a HttpResponse or JsonResponse )","title":"Fundamental Django Design"},{"location":"code_tldr/#conreq-viewport-rendering","text":"Currently, the viewport (current tab you're on) is dynamically rendered through detecting when the URL hash (ex #/settings/server/ ) changes. Detection of these changes occurs in conreq/static-dev/js/viewport.js When a change is detected, the browser will fetch whatever HTML would have been at /settings/server/ and will inject that into the viewport. Additionally, setting up any click events, and showing page transitions entirely occurs within the previously mentioned viewport.js . Note: All injected HTML is passed through DOMPurify , so therefore cannot contain potentially insecure elements such as iframes or JavaScript.","title":"Conreq Viewport Rendering"},{"location":"code_tldr/#conreq-modal-rendering","text":"Modals (pop up boxes) that appear on the page are rendered in a similar way to the viewport, but renders occur on click events rather than URL-change events. These events exist within conreq/static-dev/js/modal.js and are configured when ever the viewport has been refreshed. All modals are injected into the single #modal-container that exists on the page from first-load. Buttons that can create a modal will contain a data-modal-url value, which contains the URL endpoint to the modal. The client browser will fetch the rendered HTML in order to inject it into the page. Additionally, setting up any click events for the new modal occurs within the previously mentioned modal.js . Note: All injected HTML is passed through DOMPurify , so therefore cannot contain potentially insecure elements such as iframes or JavaScript.","title":"Conreq Modal Rendering"},{"location":"code_tldr/#django-websockets","text":"Websockets exist alongside the normal HTTP requests (ex. viewport rendering). They can be thought of as a way of the server and client communication via chat messages . When the page first loads, a connection to a chat room is formed, and chat bubbles are communicated back and forth between the server and client browser. On the server side, the URL location of where private chat rooms (direct messages) are created is determined within conreq/asgi.py . In this file, the URL is directly linked to a consumer . Django does support creating chat groups with multiple clients in it, however, Conreq currently does not utilize this feature. At the most fundamental level, a consumer is a Python class with a send and receive function. All of Conreq's consumers can be found in conreq/core/server_websockets.py . In Django, the receive and response format is most commonly JSON. This is determined based on your consumer's base class (ex. JsonWebsocketConsumer ). These classes have built-in functions for sending and receiving JSON messages (ex. send_json and recieve_json ). Overriding these functions will be where most of your Websocket logic will be written. When a JSON message is sent from server to the client browser, it will be received by the JavaScript file conreq/static-dev/client_websockets.js using ES6 standard JavaScript Websockets. This file is also the one that initiates a new Websocket communication session when the page first loads.","title":"Django Websockets"},{"location":"docs_contrib/","text":"We use MkDocs to create our documentation. For more information beyond what is in this guide, check out the MkDocs Documentation . Setting up the Docs Environment Install Python 3.8+ Switch your Conreq branch to Conreq:docs Type pip install -r requirements.txt to install MkDocs via Python. Starting the Preview Webserver MkDocs contains a free tool to allow you to preview your documentation changes live! In order to use it... Type mkdocs serve to start the preview webserver Navigate to http://127.0.0.1:8000 to see the documentation and changes live! Adding a New Docs Page Create a new markdown file within docs/ Fill in this file with any markdown text you want! Add this file to the navigation bar within mkdocs.yml Saving Your Changes At this point you've successfully created a new docs page, and determine you want to contribute these changes. In order to do so... Type mkdocs build to turn the preview into something we can use Commit your changes to GitHub Submit a Pull Request to Conreq's repository","title":"Updating the Docs"},{"location":"docs_contrib/#setting-up-the-docs-environment","text":"Install Python 3.8+ Switch your Conreq branch to Conreq:docs Type pip install -r requirements.txt to install MkDocs via Python.","title":"Setting up the Docs Environment"},{"location":"docs_contrib/#starting-the-preview-webserver","text":"MkDocs contains a free tool to allow you to preview your documentation changes live! In order to use it... Type mkdocs serve to start the preview webserver Navigate to http://127.0.0.1:8000 to see the documentation and changes live!","title":"Starting the Preview Webserver"},{"location":"docs_contrib/#adding-a-new-docs-page","text":"Create a new markdown file within docs/ Fill in this file with any markdown text you want! Add this file to the navigation bar within mkdocs.yml","title":"Adding a New Docs Page"},{"location":"docs_contrib/#saving-your-changes","text":"At this point you've successfully created a new docs page, and determine you want to contribute these changes. In order to do so... Type mkdocs build to turn the preview into something we can use Commit your changes to GitHub Submit a Pull Request to Conreq's repository","title":"Saving Your Changes"},{"location":"extensions/","text":"Work in Progress, Conreq extension framework is not yet in place. Creating the Base App Nothing here but chickens. Features Nothing here but chickens.","title":"Making Extensions"},{"location":"extensions/#creating-the-base-app","text":"Nothing here but chickens.","title":"Creating the Base App"},{"location":"extensions/#features","text":"Nothing here but chickens.","title":"Features"},{"location":"mysql/","text":"Set up a MySQL database (ex. a MySQL Docker) Create a file within your Conreq data directory create a MySQL configuration file (ex. mysql.cnf ). At minimum you must include the following: If you have to customize other parameters, such as the port, take a look at MySQL's configuration file documentation . [client] database = conreq user = db_username password = db_password host = 192.168.86.200 default-character-set = utf8 Within your Conreq environment settings, set your DB_ENGINE variable to MYSQL , and your MYSQL_CONFIG_FILE variable to the path where your configuration file is stored (ex. /config/mysql.cnf ) If using Unraid/Docker, add this as a Docker Variable. If you are self hosting Conreq on your own operating system, consider searching searching \"How to set environment variables in ... Windows 10 \"","title":"MySQL"},{"location":"organizr/","text":"Set your X_FRAME_OPTIONS variable to false. If using Unraid/Docker, add this as a Docker Variable. If you are self hosting Conreq on your own operating system, consider searching searching \"How to set environment variables in ... Windows 10 \" Go to Server Settings within Conreq and enable Organizr User Authentication Set up a Nginx reverse proxy. If you need help with this, join the Organizr Discord . After setting one up, in your Conreq block you'll need to add the following: # Sets Conreq to be accessible by all Organizr users. Google \"Organizr ServerAuth\" for more details. auth_request /auth-4; # Allows Conreq to log in as an Organizr user auth_request_set $auth_user $upstream_http_x_organizr_user; proxy_set_header X-WEBAUTH-USER $auth_user; # Allows Conreq to know the email address of an Organizr user (optional) auth_request_set $auth_email $upstream_http_x_organizr_email; proxy_set_header X-WEBAUTH-EMAIL $auth_email; # Allows Conreq to automatically configure Organizr Admins and Co-Admins as Conreq staff members (optional) auth_request_set $auth_group $upstream_http_x_organizr_group; proxy_set_header X-WEBAUTH-GROUP $auth_group;","title":"Organizr Authentication"}]}